GLOBALLY DECLARED 
MEMOIZATION
DP[1001][1001];
int lcs(string s, string t, int n, int m){
        
        if(n==0 ||m==0){
            return 0;
        }
        if(dp[n][m]!=-1){
            return dp[n][m];
        }
        if(s[n-1]==t[m-1]){
            return dp[n][m]=1+lcs(s,t,n-1,m-1);
        }
        else{
            return dp[n][m]=max(lcs(s,t,n,m-1),lcs(s,t,n-1,m));
        }
        
    }


int main(){
  string s="abc";
  string t="abcd";
  int n=sizeof(s);
  int m=sizeof(t);
  memset(dp,-1,sizeof(dp));
  int ans=lcs(s,t,n,m);  
  return ans;
}







TABULATION

class Solution
{
    public:
    
    int lcs(int n, int m, string s1, string s2)
    {
       
       int dp[n+1][m+1];
       for(int i=0;i<n+1;i++){
           for(int j=0;j<m+1;j++){
               if(i==0|| j==0){
                   dp[i][j]=0;
               }
           }
       }
       for(int i=1;i<n+1;i++){
           for(int j=1;j<m+1;j++){
               if(s1[i-1]==s2[j-1]){
                   dp[i][j]=1+dp[i-1][j-1];
                   continue;
               }
               else{
                   dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
               }
           }
       }
       return dp[n][m];
    }
}
